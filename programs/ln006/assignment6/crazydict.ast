
let dictionary = [
   ("a", ["accordion", "alligator", "ant", "apple", "apricot"]),
   ("b", ["balloon", "banana", "bird", "book", "butterfly"]),
   ("c", ["car", "cat", "chair", "cookie", "cup"]),
   ("d", ["dog", "donkey", "door", "dragon", "duck"]),
   ("e", ["ear", "eel", "egg", "elephant", "eye"]),
   ("f", ["fan", "fire", "fish", "flower", "frog"]),
   ("g", ["giraffe", "goat", "grape", "grass", "guitar"]),
   ("h", ["hand", "hat", "heart", "horse", "house"]),
   ("i", ["ice", "igloo", "insect", "island", "ivy"]),
   ("j", ["jacket", "jar", "jelly", "jog", "jungle"]),
   ("k", ["kangaroo", "kettle", "keyboard", "kite", "kiwi"]),
   ("l", ["leaf", "lemon", "lion", "lizard", "lollipop"]),
   ("m", ["map", "melon", "monkey", "moon", "mountain"]),
   ("n", ["neck", "nest", "night", "ninja", "nose"]),
   ("o", ["ocean", "octopus", "orange", "ostrich", "owl"]),
   ("p", ["panda", "peach", "penguin", "pepper", "piano"]),
   ("q", ["quack", "queen", "question", "quilt", "quiver"]),
   ("r", ["rabbit", "rainbow", "ring", "rocket", "rose"]),
   ("s", ["sandwich", "shoe", "snake", "star", "sun"]),
   ("t", ["train", "tree", "trumpet", "tulip", "turtle"]),
   ("u", ["umbrella", "under", "unicorn", "up", "utensil"]),
   ("v", ["van", "vegetable", "vine", "violin", "volcano"]),
   ("w", ["watermelon", "whale", "wheel", "window", "woodpecker"]),
   ("x", ["xanthan", "xenon", "xenophobia", "xray", "xylophone"]),
   ("y", ["yacht", "yak", "yarn", "yellow", "yogurt"]),
   ("z", ["zebra", "zigzag", "zipper", "zoo", "zucchini"])
].

-- function to check if string a is alphabetically before string b
function string_leq with (a:%string,b:%string) do return escape
"
global __retval__
(STRING,a) = state.symbol_table.lookup_sym('a')
(STRING,b) = state.symbol_table.lookup_sym('b')
__retval__ = ('boolean', a <= b)
"
end

-- function that checks if a word list is alphabetically sorted
-- if so it will return true otherwise false
function issorted 
   with [] do
      true
   with [_] do
      true
   with [a|b|t] if string_leq (a,b) do
      issorted [b|t].
   with [a|b|t] if string_leq (b,a) do
      false
end

-- function to check the integrity of a dictionary
function checkdict with d do
   for ( (letter,wordlist) if not issorted wordlist ) in d do
         throw ("unsorted list for letter "+letter).
   end
end

-- check our dictionary 
checkdict dictionary.
